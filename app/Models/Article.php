<?php

namespace App\Models;

use App\Enums\ArticleStatusEnum;
use App\Models\Scopes\ArticleGlobalScope;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Support\Facades\DB;
use Mapi\Easyapi\Models\ApiModel;

/***
 *
 */
class Article extends ApiModel
{

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::addGlobalScope(new ArticleGlobalScope());

        self::creating(function (Article $article) {
            if (!isset($article->status)) {
                $article->fill([
                    'status' => ArticleStatusEnum::Pending->value
                ]);
            }
        });
        self::updating(function (Article $article) {
            if ($article->isDirty(['title', 'content']) && $article->status != ArticleStatusEnum::Pending->value) {
                $article->fill([
                    'reviewed_by' => null,
                    'approved_by' => null,
                    'status' => ArticleStatusEnum::Updated->value
                ]);
            }
        });
    }

    protected $fillable = [
        'title',
        'content',
        'status',
        'user_id',
        'reviewed_by',
        'approved_by'
    ];

    protected $allowedColumnsToSearch = [
        'title', 'content'
    ];

    protected $allowedFilters = [
        'id', 'status'
    ];

    protected $allowedRelationsToLoad = [
        'user' => ['id', 'name'],
        'reviewer' => ['id', 'name'],
        'approvedBy' => ['id', 'name'],
        'comments' => ['id', 'article_id', 'text']
    ];

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    public function reviewer(): BelongsTo
    {
        return $this->belongsTo(User::class, 'reviewed_by');
    }

    public function approvedBy(): BelongsTo
    {
        return $this->belongsTo(User::class, 'approved_by');
    }

    public function comments(): HasMany
    {
        return $this->hasMany(Comment::class);
    }

    public static function deleteArticle(Article $article): bool
    {
        try {
            DB::beginTransaction();
            $article->comments()->delete();
            $res = Article::destroy($article->id);
            if ($res) {
                DB::commit();
            } else {
                DB::rollBack();
            }
            return $res;
        } catch (\Exception $e) {
            DB::rollBack();
            throw $e;
        }
    }

    public function review(): void
    {
        $this->status = ArticleStatusEnum::Reviewed->value;
        $this->reviewed_by = auth()->id();
        $this->save();
    }

    public function approve(): void
    {
        $this->status = ArticleStatusEnum::Approved->value;
        $this->approved_by = auth()->id();
        $this->save();
    }
}
